name: Release Desktop

on:
  push:
    tags:
      - "desktop/v*"
  workflow_dispatch:

permissions:
  contents: write

env:
  APP_NAME: "Tunno Desktop"

jobs:
  changelog:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/desktop
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract version without prefix
        id: extract_version
        run: |
          TAG="${{ github.ref_name }}"
          VERSION=${TAG#desktop/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        shell: bash

      - name: Read changelog
        id: changelog_reader
        uses: mindsers/changelog-reader-action@v2
        with:
          validation_level: warn
          version: ${{ steps.extract_version.outputs.version }}
          path: ./apps/desktop/CHANGELOG.md

    outputs:
      changelog: ${{ steps.changelog_reader.outputs.changes }}
      version: ${{ steps.extract_version.outputs.version }}

  release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-latest"
            args: ""
          - platform: "windows-latest"
            args: ""
    runs-on: ${{ matrix.platform }}
    needs: [changelog]
    defaults:
      run:
        working-directory: apps/desktop
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 10.14.0

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets:
            ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' ||
            '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./apps/desktop/src-tauri -> ./apps/desktop/target"

      - name: Install Ubuntu dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y curl wget patchelf libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev libgtk-3-dev

      - name: Install dependencies & build monorepo
        run: |
          cd ../../
          pnpm install --no-frozen-lockfile
          pnpm add -g turbo
          pnpm turbo run build --filter='@repo/*'
          cd apps/desktop

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        if: ${{ github.ref_type == 'tag' }}
        env:
          CI: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          projectPath: apps/desktop
          tagName: ${{ github.ref_name }}
          releaseName: "${{ env.APP_NAME }} v${{ needs.changelog.outputs.version }}"
          releaseBody: ${{ needs.changelog.outputs.changelog }}
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

  update-latest-json:
    runs-on: ubuntu-latest
    needs: [release]
    if: ${{ github.ref_type == 'tag' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download latest.json from release
        run: |
          RELEASE_ID=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}" \
            | jq -r '.id')

          curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets" \
            | jq -r '.[] | select(.name == "latest.json") | .browser_download_url' \
            | head -n 1 \
            | xargs curl -L -o latest.json

      - name: Update updates branch
        if: ${{ hashFiles('latest.json') != '' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git checkout updates
          mkdir -p desktop
          cp latest.json desktop/latest.json
          git add desktop/latest.json
          git commit -m "Update latest.json for ${{ github.ref_name }}"
          git push origin updates
